//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SGAC.BE
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(RE_EMPRESARESIDENCIA))]
    [KnownType(typeof(RE_PERSONARESIDENCIA))]
    [KnownType(typeof(SI_CENTROPOBLADO))]
    [KnownType(typeof(SE_USUARIO))]
    [KnownType(typeof(SI_PARAMETRO))]
    [KnownType(typeof(SI_UBICACIONGEOGRAFICA))]
    public partial class RE_RESIDENCIA: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long resi_iResidenciaId
        {
            get { return _resi_iResidenciaId; }
            set
            {
                if (_resi_iResidenciaId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'resi_iResidenciaId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _resi_iResidenciaId = value;
                    OnPropertyChanged("resi_iResidenciaId");
                }
            }
        }
        private long _resi_iResidenciaId;
    
        [DataMember]
        public short resi_sResidenciaTipoId
        {
            get { return _resi_sResidenciaTipoId; }
            set
            {
                if (_resi_sResidenciaTipoId != value)
                {
                    ChangeTracker.RecordOriginalValue("resi_sResidenciaTipoId", _resi_sResidenciaTipoId);
                    if (!IsDeserializing)
                    {
                        if (SI_PARAMETRO != null && SI_PARAMETRO.para_sParametroId != value)
                        {
                            SI_PARAMETRO = null;
                        }
                    }
                    _resi_sResidenciaTipoId = value;
                    OnPropertyChanged("resi_sResidenciaTipoId");
                }
            }
        }
        private short _resi_sResidenciaTipoId;
    
        [DataMember]
        public string resi_vResidenciaDireccion
        {
            get { return _resi_vResidenciaDireccion; }
            set
            {
                if (_resi_vResidenciaDireccion != value)
                {
                    _resi_vResidenciaDireccion = value;
                    OnPropertyChanged("resi_vResidenciaDireccion");
                }
            }
        }
        private string _resi_vResidenciaDireccion;
    
        [DataMember]
        public string resi_vCodigoPostal
        {
            get { return _resi_vCodigoPostal; }
            set
            {
                if (_resi_vCodigoPostal != value)
                {
                    _resi_vCodigoPostal = value;
                    OnPropertyChanged("resi_vCodigoPostal");
                }
            }
        }
        private string _resi_vCodigoPostal;
    
        [DataMember]
        public string resi_vResidenciaTelefono
        {
            get { return _resi_vResidenciaTelefono; }
            set
            {
                if (_resi_vResidenciaTelefono != value)
                {
                    _resi_vResidenciaTelefono = value;
                    OnPropertyChanged("resi_vResidenciaTelefono");
                }
            }
        }
        private string _resi_vResidenciaTelefono;
    
        [DataMember]
        public string resi_cResidenciaUbigeo
        {
            get { return _resi_cResidenciaUbigeo; }
            set
            {
                if (_resi_cResidenciaUbigeo != value)
                {
                    ChangeTracker.RecordOriginalValue("resi_cResidenciaUbigeo", _resi_cResidenciaUbigeo);
                    if (!IsDeserializing)
                    {
                        if (SI_UBICACIONGEOGRAFICA != null && SI_UBICACIONGEOGRAFICA.ubge_cCodigo != value)
                        {
                            SI_UBICACIONGEOGRAFICA = null;
                        }
                    }
                    _resi_cResidenciaUbigeo = value;
                    OnPropertyChanged("resi_cResidenciaUbigeo");
                }
            }
        }
        private string _resi_cResidenciaUbigeo;
    
        [DataMember]
        public string resi_cEstado
        {
            get { return _resi_cEstado; }
            set
            {
                if (_resi_cEstado != value)
                {
                    _resi_cEstado = value;
                    OnPropertyChanged("resi_cEstado");
                }
            }
        }
        private string _resi_cEstado;
    
        [DataMember]
        public short resi_sUsuarioCreacion
        {
            get { return _resi_sUsuarioCreacion; }
            set
            {
                if (_resi_sUsuarioCreacion != value)
                {
                    ChangeTracker.RecordOriginalValue("resi_sUsuarioCreacion", _resi_sUsuarioCreacion);
                    if (!IsDeserializing)
                    {
                        if (SE_USUARIO != null && SE_USUARIO.usua_sUsuarioId != value)
                        {
                            SE_USUARIO = null;
                        }
                    }
                    _resi_sUsuarioCreacion = value;
                    OnPropertyChanged("resi_sUsuarioCreacion");
                }
            }
        }
        private short _resi_sUsuarioCreacion;
    
        [DataMember]
        public string resi_vIPCreacion
        {
            get { return _resi_vIPCreacion; }
            set
            {
                if (_resi_vIPCreacion != value)
                {
                    _resi_vIPCreacion = value;
                    OnPropertyChanged("resi_vIPCreacion");
                }
            }
        }
        private string _resi_vIPCreacion;
    
        [DataMember]
        public System.DateTime resi_dFechaCreacion
        {
            get { return _resi_dFechaCreacion; }
            set
            {
                if (_resi_dFechaCreacion != value)
                {
                    _resi_dFechaCreacion = value;
                    OnPropertyChanged("resi_dFechaCreacion");
                }
            }
        }
        private System.DateTime _resi_dFechaCreacion;
    
        [DataMember]
        public Nullable<short> resi_sUsuarioModificacion
        {
            get { return _resi_sUsuarioModificacion; }
            set
            {
                if (_resi_sUsuarioModificacion != value)
                {
                    ChangeTracker.RecordOriginalValue("resi_sUsuarioModificacion", _resi_sUsuarioModificacion);
                    if (!IsDeserializing)
                    {
                        if (SE_USUARIO1 != null && SE_USUARIO1.usua_sUsuarioId != value)
                        {
                            SE_USUARIO1 = null;
                        }
                    }
                    _resi_sUsuarioModificacion = value;
                    OnPropertyChanged("resi_sUsuarioModificacion");
                }
            }
        }
        private Nullable<short> _resi_sUsuarioModificacion;
    
        [DataMember]
        public string resi_vIPModificacion
        {
            get { return _resi_vIPModificacion; }
            set
            {
                if (_resi_vIPModificacion != value)
                {
                    _resi_vIPModificacion = value;
                    OnPropertyChanged("resi_vIPModificacion");
                }
            }
        }
        private string _resi_vIPModificacion;
    
        [DataMember]
        public Nullable<System.DateTime> resi_dFechaModificacion
        {
            get { return _resi_dFechaModificacion; }
            set
            {
                if (_resi_dFechaModificacion != value)
                {
                    _resi_dFechaModificacion = value;
                    OnPropertyChanged("resi_dFechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _resi_dFechaModificacion;
    
        [DataMember]
        public Nullable<int> resi_ICentroPobladoId
        {
            get { return _resi_ICentroPobladoId; }
            set
            {
                if (_resi_ICentroPobladoId != value)
                {
                    ChangeTracker.RecordOriginalValue("resi_ICentroPobladoId", _resi_ICentroPobladoId);
                    if (!IsDeserializing)
                    {
                        if (SI_CENTROPOBLADO != null && SI_CENTROPOBLADO.cepo_ICentroPobladoId != value)
                        {
                            SI_CENTROPOBLADO = null;
                        }
                    }
                    _resi_ICentroPobladoId = value;
                    OnPropertyChanged("resi_ICentroPobladoId");
                }
            }
        }
        private Nullable<int> _resi_ICentroPobladoId;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<RE_EMPRESARESIDENCIA> RE_EMPRESARESIDENCIA
        {
            get
            {
                if (_rE_EMPRESARESIDENCIA == null)
                {
                    _rE_EMPRESARESIDENCIA = new TrackableCollection<RE_EMPRESARESIDENCIA>();
                    _rE_EMPRESARESIDENCIA.CollectionChanged += FixupRE_EMPRESARESIDENCIA;
                }
                return _rE_EMPRESARESIDENCIA;
            }
            set
            {
                if (!ReferenceEquals(_rE_EMPRESARESIDENCIA, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rE_EMPRESARESIDENCIA != null)
                    {
                        _rE_EMPRESARESIDENCIA.CollectionChanged -= FixupRE_EMPRESARESIDENCIA;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RE_EMPRESARESIDENCIA item in _rE_EMPRESARESIDENCIA)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _rE_EMPRESARESIDENCIA = value;
                    if (_rE_EMPRESARESIDENCIA != null)
                    {
                        _rE_EMPRESARESIDENCIA.CollectionChanged += FixupRE_EMPRESARESIDENCIA;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RE_EMPRESARESIDENCIA item in _rE_EMPRESARESIDENCIA)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RE_EMPRESARESIDENCIA");
                }
            }
        }
        private TrackableCollection<RE_EMPRESARESIDENCIA> _rE_EMPRESARESIDENCIA;
    
        [DataMember]
        public TrackableCollection<RE_PERSONARESIDENCIA> RE_PERSONARESIDENCIA
        {
            get
            {
                if (_rE_PERSONARESIDENCIA == null)
                {
                    _rE_PERSONARESIDENCIA = new TrackableCollection<RE_PERSONARESIDENCIA>();
                    _rE_PERSONARESIDENCIA.CollectionChanged += FixupRE_PERSONARESIDENCIA;
                }
                return _rE_PERSONARESIDENCIA;
            }
            set
            {
                if (!ReferenceEquals(_rE_PERSONARESIDENCIA, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rE_PERSONARESIDENCIA != null)
                    {
                        _rE_PERSONARESIDENCIA.CollectionChanged -= FixupRE_PERSONARESIDENCIA;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RE_PERSONARESIDENCIA item in _rE_PERSONARESIDENCIA)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _rE_PERSONARESIDENCIA = value;
                    if (_rE_PERSONARESIDENCIA != null)
                    {
                        _rE_PERSONARESIDENCIA.CollectionChanged += FixupRE_PERSONARESIDENCIA;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RE_PERSONARESIDENCIA item in _rE_PERSONARESIDENCIA)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RE_PERSONARESIDENCIA");
                }
            }
        }
        private TrackableCollection<RE_PERSONARESIDENCIA> _rE_PERSONARESIDENCIA;
    
        [DataMember]
        public SI_CENTROPOBLADO SI_CENTROPOBLADO
        {
            get { return _sI_CENTROPOBLADO; }
            set
            {
                if (!ReferenceEquals(_sI_CENTROPOBLADO, value))
                {
                    var previousValue = _sI_CENTROPOBLADO;
                    _sI_CENTROPOBLADO = value;
                    FixupSI_CENTROPOBLADO(previousValue);
                    OnNavigationPropertyChanged("SI_CENTROPOBLADO");
                }
            }
        }
        private SI_CENTROPOBLADO _sI_CENTROPOBLADO;
    
        [DataMember]
        public SE_USUARIO SE_USUARIO
        {
            get { return _sE_USUARIO; }
            set
            {
                if (!ReferenceEquals(_sE_USUARIO, value))
                {
                    var previousValue = _sE_USUARIO;
                    _sE_USUARIO = value;
                    FixupSE_USUARIO(previousValue);
                    OnNavigationPropertyChanged("SE_USUARIO");
                }
            }
        }
        private SE_USUARIO _sE_USUARIO;
    
        [DataMember]
        public SE_USUARIO SE_USUARIO1
        {
            get { return _sE_USUARIO1; }
            set
            {
                if (!ReferenceEquals(_sE_USUARIO1, value))
                {
                    var previousValue = _sE_USUARIO1;
                    _sE_USUARIO1 = value;
                    FixupSE_USUARIO1(previousValue);
                    OnNavigationPropertyChanged("SE_USUARIO1");
                }
            }
        }
        private SE_USUARIO _sE_USUARIO1;
    
        [DataMember]
        public SI_PARAMETRO SI_PARAMETRO
        {
            get { return _sI_PARAMETRO; }
            set
            {
                if (!ReferenceEquals(_sI_PARAMETRO, value))
                {
                    var previousValue = _sI_PARAMETRO;
                    _sI_PARAMETRO = value;
                    FixupSI_PARAMETRO(previousValue);
                    OnNavigationPropertyChanged("SI_PARAMETRO");
                }
            }
        }
        private SI_PARAMETRO _sI_PARAMETRO;
    
        [DataMember]
        public SI_UBICACIONGEOGRAFICA SI_UBICACIONGEOGRAFICA
        {
            get { return _sI_UBICACIONGEOGRAFICA; }
            set
            {
                if (!ReferenceEquals(_sI_UBICACIONGEOGRAFICA, value))
                {
                    var previousValue = _sI_UBICACIONGEOGRAFICA;
                    _sI_UBICACIONGEOGRAFICA = value;
                    FixupSI_UBICACIONGEOGRAFICA(previousValue);
                    OnNavigationPropertyChanged("SI_UBICACIONGEOGRAFICA");
                }
            }
        }
        private SI_UBICACIONGEOGRAFICA _sI_UBICACIONGEOGRAFICA;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
    
    
    
    		private Int16 _sOficinaConsularId;
    	[DataMember]
        public Int16 OficinaConsularId
        {
            get
            {
    			return _sOficinaConsularId;
    		}
    		set
    		{
    			_sOficinaConsularId = value;
    		}
    	}
    	private Int16 _sDiferenciaHoraria;
    	[DataMember]
        public Int16 DiferenciaHoraria
        {
            get
            {
    			return _sDiferenciaHoraria;
    		}
    		set
    		{
    			_sDiferenciaHoraria = value;
    		}
    	}
    	private Int16 _sHorarioVerano;
    	[DataMember]
        public Int16 HorarioVerano
        {
            get
            {
    			return _sHorarioVerano;
    		}
    		set
    		{
    			_sHorarioVerano = value;
    		}
    	}
    
    
    
    
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            RE_EMPRESARESIDENCIA.Clear();
            RE_PERSONARESIDENCIA.Clear();
            SI_CENTROPOBLADO = null;
            SE_USUARIO = null;
            SE_USUARIO1 = null;
            SI_PARAMETRO = null;
            SI_UBICACIONGEOGRAFICA = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupSI_CENTROPOBLADO(SI_CENTROPOBLADO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RE_RESIDENCIA.Contains(this))
            {
                previousValue.RE_RESIDENCIA.Remove(this);
            }
    
            if (SI_CENTROPOBLADO != null)
            {
                if (!SI_CENTROPOBLADO.RE_RESIDENCIA.Contains(this))
                {
                    SI_CENTROPOBLADO.RE_RESIDENCIA.Add(this);
                }
    
                resi_ICentroPobladoId = SI_CENTROPOBLADO.cepo_ICentroPobladoId;
            }
            else if (!skipKeys)
            {
                resi_ICentroPobladoId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SI_CENTROPOBLADO")
                    && (ChangeTracker.OriginalValues["SI_CENTROPOBLADO"] == SI_CENTROPOBLADO))
                {
                    ChangeTracker.OriginalValues.Remove("SI_CENTROPOBLADO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SI_CENTROPOBLADO", previousValue);
                }
                if (SI_CENTROPOBLADO != null && !SI_CENTROPOBLADO.ChangeTracker.ChangeTrackingEnabled)
                {
                    SI_CENTROPOBLADO.StartTracking();
                }
            }
        }
    
        private void FixupSE_USUARIO(SE_USUARIO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RE_RESIDENCIA.Contains(this))
            {
                previousValue.RE_RESIDENCIA.Remove(this);
            }
    
            if (SE_USUARIO != null)
            {
                if (!SE_USUARIO.RE_RESIDENCIA.Contains(this))
                {
                    SE_USUARIO.RE_RESIDENCIA.Add(this);
                }
    
                resi_sUsuarioCreacion = SE_USUARIO.usua_sUsuarioId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SE_USUARIO")
                    && (ChangeTracker.OriginalValues["SE_USUARIO"] == SE_USUARIO))
                {
                    ChangeTracker.OriginalValues.Remove("SE_USUARIO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SE_USUARIO", previousValue);
                }
                if (SE_USUARIO != null && !SE_USUARIO.ChangeTracker.ChangeTrackingEnabled)
                {
                    SE_USUARIO.StartTracking();
                }
            }
        }
    
        private void FixupSE_USUARIO1(SE_USUARIO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RE_RESIDENCIA1.Contains(this))
            {
                previousValue.RE_RESIDENCIA1.Remove(this);
            }
    
            if (SE_USUARIO1 != null)
            {
                if (!SE_USUARIO1.RE_RESIDENCIA1.Contains(this))
                {
                    SE_USUARIO1.RE_RESIDENCIA1.Add(this);
                }
    
                resi_sUsuarioModificacion = SE_USUARIO1.usua_sUsuarioId;
            }
            else if (!skipKeys)
            {
                resi_sUsuarioModificacion = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SE_USUARIO1")
                    && (ChangeTracker.OriginalValues["SE_USUARIO1"] == SE_USUARIO1))
                {
                    ChangeTracker.OriginalValues.Remove("SE_USUARIO1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SE_USUARIO1", previousValue);
                }
                if (SE_USUARIO1 != null && !SE_USUARIO1.ChangeTracker.ChangeTrackingEnabled)
                {
                    SE_USUARIO1.StartTracking();
                }
            }
        }
    
        private void FixupSI_PARAMETRO(SI_PARAMETRO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RE_RESIDENCIA.Contains(this))
            {
                previousValue.RE_RESIDENCIA.Remove(this);
            }
    
            if (SI_PARAMETRO != null)
            {
                if (!SI_PARAMETRO.RE_RESIDENCIA.Contains(this))
                {
                    SI_PARAMETRO.RE_RESIDENCIA.Add(this);
                }
    
                resi_sResidenciaTipoId = SI_PARAMETRO.para_sParametroId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SI_PARAMETRO")
                    && (ChangeTracker.OriginalValues["SI_PARAMETRO"] == SI_PARAMETRO))
                {
                    ChangeTracker.OriginalValues.Remove("SI_PARAMETRO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SI_PARAMETRO", previousValue);
                }
                if (SI_PARAMETRO != null && !SI_PARAMETRO.ChangeTracker.ChangeTrackingEnabled)
                {
                    SI_PARAMETRO.StartTracking();
                }
            }
        }
    
        private void FixupSI_UBICACIONGEOGRAFICA(SI_UBICACIONGEOGRAFICA previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RE_RESIDENCIA.Contains(this))
            {
                previousValue.RE_RESIDENCIA.Remove(this);
            }
    
            if (SI_UBICACIONGEOGRAFICA != null)
            {
                if (!SI_UBICACIONGEOGRAFICA.RE_RESIDENCIA.Contains(this))
                {
                    SI_UBICACIONGEOGRAFICA.RE_RESIDENCIA.Add(this);
                }
    
                resi_cResidenciaUbigeo = SI_UBICACIONGEOGRAFICA.ubge_cCodigo;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SI_UBICACIONGEOGRAFICA")
                    && (ChangeTracker.OriginalValues["SI_UBICACIONGEOGRAFICA"] == SI_UBICACIONGEOGRAFICA))
                {
                    ChangeTracker.OriginalValues.Remove("SI_UBICACIONGEOGRAFICA");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SI_UBICACIONGEOGRAFICA", previousValue);
                }
                if (SI_UBICACIONGEOGRAFICA != null && !SI_UBICACIONGEOGRAFICA.ChangeTracker.ChangeTrackingEnabled)
                {
                    SI_UBICACIONGEOGRAFICA.StartTracking();
                }
            }
        }
    
        private void FixupRE_EMPRESARESIDENCIA(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RE_EMPRESARESIDENCIA item in e.NewItems)
                {
                    item.RE_RESIDENCIA = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RE_EMPRESARESIDENCIA", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RE_EMPRESARESIDENCIA item in e.OldItems)
                {
                    if (ReferenceEquals(item.RE_RESIDENCIA, this))
                    {
                        item.RE_RESIDENCIA = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RE_EMPRESARESIDENCIA", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRE_PERSONARESIDENCIA(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RE_PERSONARESIDENCIA item in e.NewItems)
                {
                    item.RE_RESIDENCIA = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RE_PERSONARESIDENCIA", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RE_PERSONARESIDENCIA item in e.OldItems)
                {
                    if (ReferenceEquals(item.RE_RESIDENCIA, this))
                    {
                        item.RE_RESIDENCIA = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RE_PERSONARESIDENCIA", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
