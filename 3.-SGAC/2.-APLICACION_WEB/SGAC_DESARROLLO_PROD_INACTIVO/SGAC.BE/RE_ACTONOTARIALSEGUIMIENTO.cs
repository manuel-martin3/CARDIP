//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SGAC.BE
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SE_USUARIO))]
    [KnownType(typeof(SI_PARAMETRO))]
    [KnownType(typeof(RE_ACTONOTARIAL))]
    public partial class RE_ACTONOTARIALSEGUIMIENTO: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long anse_iActoNotarialSeguimientoId
        {
            get { return _anse_iActoNotarialSeguimientoId; }
            set
            {
                if (_anse_iActoNotarialSeguimientoId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'anse_iActoNotarialSeguimientoId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _anse_iActoNotarialSeguimientoId = value;
                    OnPropertyChanged("anse_iActoNotarialSeguimientoId");
                }
            }
        }
        private long _anse_iActoNotarialSeguimientoId;
    
        [DataMember]
        public long anse_iActoNotarialId
        {
            get { return _anse_iActoNotarialId; }
            set
            {
                if (_anse_iActoNotarialId != value)
                {
                    ChangeTracker.RecordOriginalValue("anse_iActoNotarialId", _anse_iActoNotarialId);
                    if (!IsDeserializing)
                    {
                        if (RE_ACTONOTARIAL != null && RE_ACTONOTARIAL.acno_iActoNotarialId != value)
                        {
                            RE_ACTONOTARIAL = null;
                        }
                    }
                    _anse_iActoNotarialId = value;
                    OnPropertyChanged("anse_iActoNotarialId");
                }
            }
        }
        private long _anse_iActoNotarialId;
    
        [DataMember]
        public short anse_sEtapaId
        {
            get { return _anse_sEtapaId; }
            set
            {
                if (_anse_sEtapaId != value)
                {
                    ChangeTracker.RecordOriginalValue("anse_sEtapaId", _anse_sEtapaId);
                    if (!IsDeserializing)
                    {
                        if (SI_PARAMETRO != null && SI_PARAMETRO.para_sParametroId != value)
                        {
                            SI_PARAMETRO = null;
                        }
                    }
                    _anse_sEtapaId = value;
                    OnPropertyChanged("anse_sEtapaId");
                }
            }
        }
        private short _anse_sEtapaId;
    
        [DataMember]
        public Nullable<System.DateTime> anse_dFechaRegistro
        {
            get { return _anse_dFechaRegistro; }
            set
            {
                if (_anse_dFechaRegistro != value)
                {
                    _anse_dFechaRegistro = value;
                    OnPropertyChanged("anse_dFechaRegistro");
                }
            }
        }
        private Nullable<System.DateTime> _anse_dFechaRegistro;
    
        [DataMember]
        public string anse_cEstado
        {
            get { return _anse_cEstado; }
            set
            {
                if (_anse_cEstado != value)
                {
                    _anse_cEstado = value;
                    OnPropertyChanged("anse_cEstado");
                }
            }
        }
        private string _anse_cEstado;
    
        [DataMember]
        public short anse_sUsuarioCreacion
        {
            get { return _anse_sUsuarioCreacion; }
            set
            {
                if (_anse_sUsuarioCreacion != value)
                {
                    ChangeTracker.RecordOriginalValue("anse_sUsuarioCreacion", _anse_sUsuarioCreacion);
                    if (!IsDeserializing)
                    {
                        if (SE_USUARIO != null && SE_USUARIO.usua_sUsuarioId != value)
                        {
                            SE_USUARIO = null;
                        }
                    }
                    _anse_sUsuarioCreacion = value;
                    OnPropertyChanged("anse_sUsuarioCreacion");
                }
            }
        }
        private short _anse_sUsuarioCreacion;
    
        [DataMember]
        public string anse_vIPCreacion
        {
            get { return _anse_vIPCreacion; }
            set
            {
                if (_anse_vIPCreacion != value)
                {
                    _anse_vIPCreacion = value;
                    OnPropertyChanged("anse_vIPCreacion");
                }
            }
        }
        private string _anse_vIPCreacion;
    
        [DataMember]
        public System.DateTime anse_dFechaCreacion
        {
            get { return _anse_dFechaCreacion; }
            set
            {
                if (_anse_dFechaCreacion != value)
                {
                    _anse_dFechaCreacion = value;
                    OnPropertyChanged("anse_dFechaCreacion");
                }
            }
        }
        private System.DateTime _anse_dFechaCreacion;
    
        [DataMember]
        public Nullable<short> anse_sUsuarioModificacion
        {
            get { return _anse_sUsuarioModificacion; }
            set
            {
                if (_anse_sUsuarioModificacion != value)
                {
                    ChangeTracker.RecordOriginalValue("anse_sUsuarioModificacion", _anse_sUsuarioModificacion);
                    if (!IsDeserializing)
                    {
                        if (SE_USUARIO1 != null && SE_USUARIO1.usua_sUsuarioId != value)
                        {
                            SE_USUARIO1 = null;
                        }
                    }
                    _anse_sUsuarioModificacion = value;
                    OnPropertyChanged("anse_sUsuarioModificacion");
                }
            }
        }
        private Nullable<short> _anse_sUsuarioModificacion;
    
        [DataMember]
        public string anse_vIPModificacion
        {
            get { return _anse_vIPModificacion; }
            set
            {
                if (_anse_vIPModificacion != value)
                {
                    _anse_vIPModificacion = value;
                    OnPropertyChanged("anse_vIPModificacion");
                }
            }
        }
        private string _anse_vIPModificacion;
    
        [DataMember]
        public Nullable<System.DateTime> anse_dFechaModificacion
        {
            get { return _anse_dFechaModificacion; }
            set
            {
                if (_anse_dFechaModificacion != value)
                {
                    _anse_dFechaModificacion = value;
                    OnPropertyChanged("anse_dFechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _anse_dFechaModificacion;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public SE_USUARIO SE_USUARIO
        {
            get { return _sE_USUARIO; }
            set
            {
                if (!ReferenceEquals(_sE_USUARIO, value))
                {
                    var previousValue = _sE_USUARIO;
                    _sE_USUARIO = value;
                    FixupSE_USUARIO(previousValue);
                    OnNavigationPropertyChanged("SE_USUARIO");
                }
            }
        }
        private SE_USUARIO _sE_USUARIO;
    
        [DataMember]
        public SE_USUARIO SE_USUARIO1
        {
            get { return _sE_USUARIO1; }
            set
            {
                if (!ReferenceEquals(_sE_USUARIO1, value))
                {
                    var previousValue = _sE_USUARIO1;
                    _sE_USUARIO1 = value;
                    FixupSE_USUARIO1(previousValue);
                    OnNavigationPropertyChanged("SE_USUARIO1");
                }
            }
        }
        private SE_USUARIO _sE_USUARIO1;
    
        [DataMember]
        public SI_PARAMETRO SI_PARAMETRO
        {
            get { return _sI_PARAMETRO; }
            set
            {
                if (!ReferenceEquals(_sI_PARAMETRO, value))
                {
                    var previousValue = _sI_PARAMETRO;
                    _sI_PARAMETRO = value;
                    FixupSI_PARAMETRO(previousValue);
                    OnNavigationPropertyChanged("SI_PARAMETRO");
                }
            }
        }
        private SI_PARAMETRO _sI_PARAMETRO;
    
        [DataMember]
        public RE_ACTONOTARIAL RE_ACTONOTARIAL
        {
            get { return _rE_ACTONOTARIAL; }
            set
            {
                if (!ReferenceEquals(_rE_ACTONOTARIAL, value))
                {
                    var previousValue = _rE_ACTONOTARIAL;
                    _rE_ACTONOTARIAL = value;
                    FixupRE_ACTONOTARIAL(previousValue);
                    OnNavigationPropertyChanged("RE_ACTONOTARIAL");
                }
            }
        }
        private RE_ACTONOTARIAL _rE_ACTONOTARIAL;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
    
    
    
    		private Int16 _sOficinaConsularId;
    	[DataMember]
        public Int16 OficinaConsularId
        {
            get
            {
    			return _sOficinaConsularId;
    		}
    		set
    		{
    			_sOficinaConsularId = value;
    		}
    	}
    	private Int16 _sDiferenciaHoraria;
    	[DataMember]
        public Int16 DiferenciaHoraria
        {
            get
            {
    			return _sDiferenciaHoraria;
    		}
    		set
    		{
    			_sDiferenciaHoraria = value;
    		}
    	}
    	private Int16 _sHorarioVerano;
    	[DataMember]
        public Int16 HorarioVerano
        {
            get
            {
    			return _sHorarioVerano;
    		}
    		set
    		{
    			_sHorarioVerano = value;
    		}
    	}
    
    
    
    
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SE_USUARIO = null;
            SE_USUARIO1 = null;
            SI_PARAMETRO = null;
            RE_ACTONOTARIAL = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupSE_USUARIO(SE_USUARIO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RE_ACTONOTARIALSEGUIMIENTO.Contains(this))
            {
                previousValue.RE_ACTONOTARIALSEGUIMIENTO.Remove(this);
            }
    
            if (SE_USUARIO != null)
            {
                if (!SE_USUARIO.RE_ACTONOTARIALSEGUIMIENTO.Contains(this))
                {
                    SE_USUARIO.RE_ACTONOTARIALSEGUIMIENTO.Add(this);
                }
    
                anse_sUsuarioCreacion = SE_USUARIO.usua_sUsuarioId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SE_USUARIO")
                    && (ChangeTracker.OriginalValues["SE_USUARIO"] == SE_USUARIO))
                {
                    ChangeTracker.OriginalValues.Remove("SE_USUARIO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SE_USUARIO", previousValue);
                }
                if (SE_USUARIO != null && !SE_USUARIO.ChangeTracker.ChangeTrackingEnabled)
                {
                    SE_USUARIO.StartTracking();
                }
            }
        }
    
        private void FixupSE_USUARIO1(SE_USUARIO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RE_ACTONOTARIALSEGUIMIENTO1.Contains(this))
            {
                previousValue.RE_ACTONOTARIALSEGUIMIENTO1.Remove(this);
            }
    
            if (SE_USUARIO1 != null)
            {
                if (!SE_USUARIO1.RE_ACTONOTARIALSEGUIMIENTO1.Contains(this))
                {
                    SE_USUARIO1.RE_ACTONOTARIALSEGUIMIENTO1.Add(this);
                }
    
                anse_sUsuarioModificacion = SE_USUARIO1.usua_sUsuarioId;
            }
            else if (!skipKeys)
            {
                anse_sUsuarioModificacion = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SE_USUARIO1")
                    && (ChangeTracker.OriginalValues["SE_USUARIO1"] == SE_USUARIO1))
                {
                    ChangeTracker.OriginalValues.Remove("SE_USUARIO1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SE_USUARIO1", previousValue);
                }
                if (SE_USUARIO1 != null && !SE_USUARIO1.ChangeTracker.ChangeTrackingEnabled)
                {
                    SE_USUARIO1.StartTracking();
                }
            }
        }
    
        private void FixupSI_PARAMETRO(SI_PARAMETRO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RE_ACTONOTARIALSEGUIMIENTO.Contains(this))
            {
                previousValue.RE_ACTONOTARIALSEGUIMIENTO.Remove(this);
            }
    
            if (SI_PARAMETRO != null)
            {
                if (!SI_PARAMETRO.RE_ACTONOTARIALSEGUIMIENTO.Contains(this))
                {
                    SI_PARAMETRO.RE_ACTONOTARIALSEGUIMIENTO.Add(this);
                }
    
                anse_sEtapaId = SI_PARAMETRO.para_sParametroId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SI_PARAMETRO")
                    && (ChangeTracker.OriginalValues["SI_PARAMETRO"] == SI_PARAMETRO))
                {
                    ChangeTracker.OriginalValues.Remove("SI_PARAMETRO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SI_PARAMETRO", previousValue);
                }
                if (SI_PARAMETRO != null && !SI_PARAMETRO.ChangeTracker.ChangeTrackingEnabled)
                {
                    SI_PARAMETRO.StartTracking();
                }
            }
        }
    
        private void FixupRE_ACTONOTARIAL(RE_ACTONOTARIAL previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RE_ACTONOTARIALSEGUIMIENTO.Contains(this))
            {
                previousValue.RE_ACTONOTARIALSEGUIMIENTO.Remove(this);
            }
    
            if (RE_ACTONOTARIAL != null)
            {
                if (!RE_ACTONOTARIAL.RE_ACTONOTARIALSEGUIMIENTO.Contains(this))
                {
                    RE_ACTONOTARIAL.RE_ACTONOTARIALSEGUIMIENTO.Add(this);
                }
    
                anse_iActoNotarialId = RE_ACTONOTARIAL.acno_iActoNotarialId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("RE_ACTONOTARIAL")
                    && (ChangeTracker.OriginalValues["RE_ACTONOTARIAL"] == RE_ACTONOTARIAL))
                {
                    ChangeTracker.OriginalValues.Remove("RE_ACTONOTARIAL");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("RE_ACTONOTARIAL", previousValue);
                }
                if (RE_ACTONOTARIAL != null && !RE_ACTONOTARIAL.ChangeTracker.ChangeTrackingEnabled)
                {
                    RE_ACTONOTARIAL.StartTracking();
                }
            }
        }

        #endregion
    }
}
